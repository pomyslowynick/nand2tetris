// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Keyboard 110 0000 0000 0000
    Keyboard(out=tempKbd);

    // RAM 011 1111 1111 1111 = 16383 - last RAM address
    Not(in=address[14], out=notAddress14);
    And(a=notAddress14, b=load, out=loadRam);
    RAM16K(in=in, load=loadRam, address=address[0..13], out=tempRam);

    // Screen 100 0000 0000 0000 = 16384 - first address
    Not(in=address[13], out=tempNot13);
    And(a=tempNot13, b=address[14], out=screenOut);
    And(a=screenOut, b=load, out=screenLoad);
    Screen(in=in, load=screenLoad, address=address[0..12], out=finalScreen);
    Mux4Way16(a=tempRam, b=tempRam, c=finalScreen, d=tempKbd, sel=address[13..14], out=out);

    // Left over own implementation of the screen
    // RAM4K(in=in, load=lowerLoad, address=address[2..13], out=tempScreenLower);
    // RAM4K(in=in, load=upperLoad, address=address[2..13], out=tempScreenUpper);
    // Mux16(a=tempScreenLower, b=tempScreenUpper, sel=address[12], out=finalScreen);

    // Turns out I didn't need to implement the keyboard? ;(
    // And(a=address[13], b=address[14], out=kbdOut);
    // And(a=kbdOut, b=load, out=loadKbd);
    // Register(in=in, load=loadKbd, out=tempKbd);
}