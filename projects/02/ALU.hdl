// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // zx and yx
        Mux16(a=x, b=false, sel=zx, out=tempzx);
        Mux16(a=y, b=false, sel=zy, out=tempzy);

        // nx and ny
        Not16(in=tempzx, out=tempnx);
        Not16(in=tempzy, out=tempny);
        Mux16(a=tempzx, b=tempnx, sel=nx, out=stageNX);
        Mux16(a=tempzy, b=tempny, sel=ny, out=stageNY);

        // f
        Add16(a=stageNX, b=stageNY, out=stageFaddition);
        And16(a=stageNX, b=stageNY, out=stageFand);
        Mux16(a=stageFand, b=stageFaddition, sel=f, out=endStageF);

        // no
        Not16(in=endStageF, out=notLastStage);
        Mux16(a=endStageF, b=notLastStage, sel=no, out[0..7]=tempFinalFirst);
        Mux16(a=endStageF, b=notLastStage, sel=no, out[8..15]=tempFinalTwo);
        Mux16(a=endStageF, b=notLastStage, sel=no, out=tempFinal);
        Mux16(a=endStageF, b=notLastStage, sel=no, out=out);

        //zr
        //Not16(in=tempFinal, out=notTempFinal);
        //And16(a=notTempFinal, b=true, out[0]=tempzr);
        Or8Way(in=tempFinalFirst, out=zeroFirst);
        Or8Way(in=tempFinalTwo, out=zeroTwo);
        Not(in=zeroFirst, out=LastZeroOne);
        Not(in=zeroTwo, out=LastZeroTwo);
        And(a=LastZeroOne, b=LastZeroTwo, out=zr);
        //And(a=tempzr, b=true, out=zr);

        //ng
        And16(a=tempFinal, b=true, out[15]=tempNeg);
        And(a=tempNeg, b=true, out=ng);
        
}